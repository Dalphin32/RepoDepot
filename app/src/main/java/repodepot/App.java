/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package repodepot;

import java.util.Date;
import java.util.ArrayList;
import static com.mongodb.client.model.Filters.lt;
import java.util.Scanner;
import java.util.Arrays;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;
import com.mongodb.MongoException;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Projections;
import com.mongodb.client.result.InsertOneResult;
import static com.mongodb.client.model.Filters.eq;
import com.mongodb.client.model.Sorts;
import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.model.Updates;

import org.bson.conversions.Bson;

public class App {
    private static String current_user;

    public static void main(String[] args) {
        start();
    }


    static void start(){
        Scanner scnr = new Scanner(System.in);

        System.out.println("________________________________________________________________");
        System.out.println("    /'\\      /'''''\\   /'''''\\   /'''''\\   |'''''''\\   |'''''\\  ");
        System.out.println("   /   \\    |  ____/  |  ____/  |  |'|  |  |  | |   |  | |'|  \\ ");
        System.out.println("  /=====\\   |  |      |  |      |  | |  |  |   _   /   | | |   |");
        System.out.println(" /       \\  |  ''''\\  |  ''''\\  |  |_|  |  |  | \\  \\   | |_|  / ");
        System.out.println("/         \\  \\_____/   \\_____/   \\_____/   |__|  \\__\\  |_____/  ");
        System.out.println("________________________________________________________________");
        System.out.println("");
        System.out.println("[1] Login");
        System.out.println("[2] Sign up");
        System.out.println("[3] Shut down");
        String log_or_sign = scnr.nextLine();
        if (log_or_sign.equals("1")){
            System.out.println("Welcome!! Lets get you logged in!!");
            System.out.println("Enter your username: ");
            String userName = scnr.nextLine();  // Read user input
            System.out.println("Password: ");
            String pass = scnr.nextLine();  // Read user input
            boolean loggedIn = false;
            if(!(alreadyUsed(userName) && getUser(userName)[1].equals(pass))){
                int x = 0;
                while(x<2){
                    System.out.println("UserName or password is incorrect please re-enter");
                    System.out.println("Enter your username: ");
                    userName = scnr.nextLine();  // Read user input
                    System.out.println("Password: ");
                    pass = scnr.nextLine();  // Read user input
                    if(alreadyUsed(userName) && getUser(userName)[1].equals(pass)){
                        loggedIn = true;
                        break;
                    }
                    x++;
                }
                if(!loggedIn){
                    String newOne = "N";  // Read user input
                    while(newOne.equals("N")){
                        System.out.println("UserName or password is incorrect please re-enter");
                        System.out.println("Enter your username: ");
                        userName = scnr.nextLine();  // Read user input
                        System.out.println("Password: ");
                        pass = scnr.nextLine();  // Read user input
                        if(alreadyUsed(userName) && getUser(userName)[1].equals(pass)){
                            break;
                        }
                        System.out.println("Bro your account still isn't found you wanna create a new one?[Y or N]: ");
                        newOne = scnr.nextLine();  // Read user input
                        if(newOne.equals("Y")){
                            if(create()){
                                break;
                            }
                        }

                    }

                }
            }
            
            set_current_user(userName);
            home();

            //log in
        } else if (log_or_sign.equals("2")){

            if(create()){
                System.out.println("Your account was successfully created!!");
                home();
            }
        } else{
            System.exit(0);
        }
    }




    static Boolean create(){
        Scanner scnr = new Scanner(System.in);
        System.out.println("Welcome new user!! Lets get you an account");
            System.out.println("Please enter a username(must not contain spaces): ");
            String userName = scnr.nextLine();  // Read user input
            while(userName.contains(" ") || alreadyUsed(userName)){
                if(userName.contains(" ")){
                    System.out.println("Please enter a username(must not contain spaces): ");
                    userName = scnr.nextLine();  // Read user input
                }else{
                    System.out.println("That username is already taken please select a new one: ");
                    userName = scnr.nextLine();  // Read user input
                }
                
            }


            System.out.println("Please enter a password(must be at least 8 characters): ");
            String pass = scnr.nextLine();  // Read user input
            while(pass.length()< 8){
                System.out.println("Password must be at least 8 characters: ");
                pass = scnr.nextLine();  // Read user input
            }
            System.out.println("Please re-enter your password: ");
            String checkpass = scnr.nextLine();  // Read user input
            while(!(pass.equals(checkpass))){
                System.out.println("Your password does not match, please re-enter the correct password: ");
                checkpass = scnr.nextLine();  // Read user input
            }



            System.out.println("Please enter a security question to verify your account: ");
            String securityQuestion = scnr.nextLine();  // Read user input

            System.out.println("Please enter your bio: ");
            String bio = scnr.nextLine();  // Read user input

            System.out.println("Please enter youre name: ");
            String name = scnr.nextLine();  // Read user input
        //scnr.close();
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("users");
            try {
                // Inserts a sample document describing a movie into the collection
                InsertOneResult result = collection.insertOne(new Document()
                        .append("_id", new ObjectId())
                        .append("UserName", userName)
                        .append("Password", pass)
                        .append("Question", securityQuestion)
                        .append("Bio", bio)
                        .append("Name", name));
                // Prints the ID of the inserted document
                //redirect to home
                set_current_user(userName);
                return true;
            
            // Prints a message if any exceptions occur during the operation
            } catch (MongoException me) {
                return false;
            }
        }
        
    }

    static void logout(){
        System.out.println("Goodbye! :)");
        set_current_user(null);
        start();
    }

    static String[] getUser(String name){
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)){
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("users");
            Document doc = collection.find(eq("UserName", name)).first();
            if (doc == null){
                return null;
            }
            else{
                String[] user = new String[2];
                user[0] = doc.get("UserName")+"";
                user[1] = doc.get("Password")+"";
                return user;
            }
        }
    }


    static Boolean alreadyUsed(String username){
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("users");
            Bson projectionFields = Projections.fields(
                    Projections.include("UserName"),
                    Projections.excludeId());
                    Document doc = collection.find(eq("UserName", username)).projection(projectionFields).first();
                    if(doc == null){
                        return false;
                    }
                    return true;
        }
    }

    public static void home(){
        String[] users = usersInServer();
        Scanner scnr = new Scanner(System.in);

        System.out.println("Welcome "+get_current_user()+"!");
        System.out.println("[1] Send Message");
        System.out.println("[2] See Users");
        System.out.println("[3] Rooms");
        System.out.println("[4] Check Messages");
        System.out.println("[5] Update Profile");
        System.out.println("[6] Log out");
        String opt = scnr.nextLine();

        switch(opt){
            case "1":
                String[] l_users = usersInServer();
                for(int x= 1; x<=l_users.length; x++){
                    if (x<l_users.length){
                        System.out.println(x+": "+l_users[x]);
                    }else{
                        System.out.println(x+": Go Back");  
                    }
                }
                System.out.println("What user would you like to message?");
                int selected_user = scnr.nextInt();
                scnr.nextLine();

                if(selected_user >= l_users.length){
                    System.out.println("user does not exist!");
                }else{
                        System.out.println("Enter message:");
                        System.out.println("[b] back");
                        String msg_body = scnr.nextLine();
                        if (msg_body != "b"){
                        sendMessage(msg_body,l_users[selected_user],false);
                        System.out.println("Message Sent!");
                        }
                }


            break;
            case "2":
                System.out.println("Users:");
                for(int x= 1; x<=users.length; x++){
                    if (x<users.length){
                        System.out.println(x+": "+users[x]);
                    }else{
                        System.out.println(x+": Go Back");  
                    }
                }
                System.out.println("Enter the number of the user or action you would like to do: ");
                int action = scnr.nextInt();
                if(action >= users.length){
                    home();
                }else{
                    //System.out.println(users[1]);
                    seeProfile(users[action]);
                }
            break;
            case "3":
                System.out.println("Here are all the rooms");
                String []rooms = showRooms();
                for(int x= 1; x<rooms.length; x++){
                    System.out.println(x+": "+rooms[x]);
                }
                System.out.println("[1] Add A Room");
                System.out.println("[2] See A Room");
                System.out.println("[3] Join A Room");
                System.out.println("[4] Delete A Room");
                /*System.out.println("[5] Update Profile");
                System.out.println("[6] Log out");
                System.out.println("Do you want to add a room? (y or n)");*/
                String seeroom = scnr.nextLine();
                if(seeroom.equals("1")){
                    System.out.println("What is the room name?");
                    String name = scnr.next();
                    System.out.println("What is the room description?");
                    scnr.nextLine();
                    String desc = scnr.nextLine();
                    createRoom(name, desc, get_current_user());
                }else if (seeroom.equals("2")){
                    for(int x= 1; x<users.length; x++){
                        System.out.println(x+": "+users[x]);
                    }
                    System.out.println("Enter the number of the user who's rooms you would like to see: ");
                    int choice = scnr.nextInt();
                    showRoom(users[choice]);
                    /*System.out.println("Do you want to see a room? (y or n)");
                    String see = scnr.next();
                    if(see.equals("y")){
                        System.out.println("Whos room do you want to see? (please enter user name)");
                        String user = scnr.next();
                        showRoom(user);
                    }else{
                        System.out.println("Do you want to join a room? (y or n)");
                        String join = scnr.next();
                        if(join.equals("y")){
                            System.out.println("What Room do you want to join?");
                            String room = scnr.next();
                            joinRoom(room);
                        }
                    }*/
                }else if(seeroom.equals("3")){
                    System.out.println("Enter the number of the room you want to join:");
                    int roomNum = scnr.nextInt();
                    joinRoom(rooms[roomNum]);
                }
            break;
            case "4":
                read_messages(get_current_user(), false);
                System.out.println("press enter to continue");
                scnr.nextLine();
            break;
            case "5":
                //update profile
            break;
            case "6":
                logout();
            break;
        }
        home();
    }

    public static void seeProfile(String userName){
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("users");
            Bson projectionFields = Projections.fields(
                    Projections.include("UserName"),
                    Projections.include("Bio"),
                    Projections.include("Name"),
                    Projections.excludeId());
            Document doc = collection.find(eq("UserName", userName)).projection(projectionFields).first();

            System.out.println();
            System.out.println();
            System.out.println();
            System.out.println(doc.get("UserName") +" -- "+ doc.get("Name"));
            System.out.println("Bio: " + doc.get("Bio"));
            System.out.println();
            System.out.println();
            System.out.println();
        }
    }
    public static String[] usersInServer(){ 
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("users");
            long longLength = collection.countDocuments();
            int length = (int) longLength;
            String[] users = new String[length]; 
            try{
                Bson projectionFields = Projections.fields(
                    Projections.include("UserName"),
                    Projections.excludeId());
                Document doc = collection.find().projection(projectionFields).first();
                users[0] = doc +"";
                MongoCursor<Document> docs = collection.find().projection(projectionFields).iterator();
                for(int x = 1; x<users.length;x++){
                    try {
                        if(docs.hasNext()) {
                            String name = (docs.next().get("UserName")+"");
                            if(!name.equals(get_current_user())){
                                users[x] = (name);
                            }else{
                                x--;
                            }
                        }
                     } finally {
                        docs.close();
                        //x = users.length;
                    }
                } 
                return users;             
            }
            catch (MongoException me) {
                System.err.println("Unable to insert due to an error: " + me);
            }
        }
        return null; 
    }

    public static void sendMessage(String body, String user, boolean is_room){
        if (is_room) user = "r_" + user;
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("messages");
            try{
                InsertOneResult message = collection.insertOne(new Document()
                .append("text",body)
                .append("user",user)
                .append("time", new Date())
                .append("sent_by",get_current_user())
                );
            }
            catch (MongoException me) {
                System.err.println("Unable to insert due to an error: " + me);
            }
        }
    }
    public static void read_messages(String user, boolean is_room){
        if (is_room) user = "r_" + user;
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("messages");
            Bson projectionFields = Projections.fields(Projections.excludeId());
            MongoCursor<Document> cursor = collection.find(eq("user",user))
                    .projection(projectionFields)
                    .sort(Sorts.descending("id")).iterator();
            try {
                System.out.println("________________________________________________________________________________");
                while(cursor.hasNext()) {
                    Document next = cursor.next();
                    //Date tim = next.get("time");
                    //System.out.println(tim.getHours()+":"+tim.getMinutes());
                    System.out.print(next.get("sent_by")+": ");
                    System.out.println(next.get("text"));
                    System.out.println("________________________________________________________________________________");
                }
            } finally {
                cursor.close();
            }
        }
    }

    public static void createRoom(String roomName, String description, String user){
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("rooms");
            try {
                // Inserts a sample document describing a movie into the collection
                InsertOneResult result = collection.insertOne(new Document()
                        .append("_id", new ObjectId())
                        .append("user:", user)
                        .append("userList:", new ArrayList<String>())
                        .append("name:", roomName)
                        .append("decription:", description));
                // Prints the name of the inserted document
                System.out.println("Success! you created the " + roomName + " room." );
                System.out.println("User: " + user);
                System.out.println("Name: " + roomName);
                System.out.println("Description: " + description);
                home();
            
            // Prints a message if any exceptions occur during the operation
            } catch (MongoException me) {
                System.err.println("Unable to insert due to an error: " + me);
            }
        }
    }
    
    public static String[] showRooms(){
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("rooms");
            long longLength = collection.countDocuments();
            int length = (int) longLength;
            String[] rooms = new String[length]; 
            /*MongoCursor<Document> cursor = collection.find()
                .sort(Sorts.descending("name:")).iterator();*/
            try {
                Bson projectionFields = Projections.fields(
                    Projections.include("name"),
                    Projections.excludeId());
                Document doc = collection.find().projection(projectionFields).first();
                rooms[0] = doc +"";
                MongoCursor<Document> docs = collection.find().projection(projectionFields).iterator();
                for(int x = 1; x<rooms.length;x++){
                    try {
                        if(docs.hasNext()) {
                            String name = (docs.next().get("name")+"");
                            rooms[x] = (name);
                        }

                         /*while(cursor.hasNext()){
                             System.out.println(cursor.next().getString("name:"));
                            }*/
                    }finally{
                        docs.close();
                    }
                
                }
                return rooms; 
            }catch (MongoException me) {
                System.err.println("Unable to insert due to an error: " + me);
            }
            return null;
            }
        }


    public static void showRoom(String user){
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("rooms");
            MongoCursor<Document> cursor = collection.find()
                .sort(Sorts.descending("user:")).iterator();
            try {
                Bson projectionFields = Projections.fields(
                    Projections.include("user", "name", "people"),
                    Projections.excludeId());
                Document doc = collection.find(lt("user", user))
                    .projection(projectionFields)
                    .first();
                if (doc == null) {
                    System.out.println("No results found.");
                }else {
                    System.out.println("Room name: " + doc.get("name"));
                    System.out.println("User: " + doc.get("user"));
                    System.out.println("People in Room: " + doc.get("people"));
                }
            } catch (MongoException me) {
                System.err.println("Unable to read due to an error: " + me);
            }finally {
                cursor.close();
            }
        }
    }

    public static void joinRoom(String room){
        String uri = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("rooms");
            try {
                // Inserts a sample document describing a movie into the collection
                Document doc = collection.find(lt("name:", room))
                    .sort(Sorts.ascending("name:"))
                    .first();

                
                //doc.get("userList:").add(get_current_user());
            
            // Prints a message if any exceptions occur during the operation
            } catch (MongoException me) {
                System.err.println("Unable to join due to an error: " + me);
            }
        }
    }

    public static void set_current_user(String user){
        current_user = user;
    }
    public static String get_current_user(){
        return current_user;
    }
}




/*String connectionString = "mongodb+srv://emCorey:test1234@cluster0.cwb4w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(connectionString)) {
            MongoDatabase database = mongoClient.getDatabase("DolphinMangoCore");
            MongoCollection<Document> collection = database.getCollection("users");
            
            
        }*/
